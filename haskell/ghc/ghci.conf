:set -package pretty-show
import Text.Show.Pretty (pPrint)
:set -interactive-print pPrint

:set prompt "\ESC[1;32m\STXî˜Ÿ \ESC[m\STX"
:set prompt-cont "\ESC[1;32m\STX| \ESC[m\STX"
:set +t
:set editor nvim
:set -XTypeApplications
:set -XTemplateHaskell
:set -XQuasiQuotes
:set -XRecordWildCards
:set -XViewPatterns
:set -XDataKinds
:set -XPatternSynonyms
:m +Control.Applicative
:m +Control.Monad
:m +Control.Arrow
:m +Control.Monad.Zip
:m +Data.Functor
:m +Data.Functor.Identity
:m +Data.Functor.Compose
:m +Data.Maybe
:m +Text.Show.Functions
:m +Data.Function
:m +Data.Monoid
:m +Data.Char
:m +System.IO
:m +System.Environment
:m +Data.Proxy
-- saving keystrokes
:def +li const $ return ":m +Data.List"
:def -li const $ return ":m -Data.List"
:def +ne const $ return ":m +Data.List.NonEmpty"
:def -ne const $ return ":m -Data.List.NonEmpty"
:def os const $ return ":set -XOverloadedStrings"
:def -os const $ return ":unset -XOverloadedStrings"
:def +sm const $ return ":m +Data.Semigroup"
:def -sm const $ return ":m -Data.Semigroup"
:def rta const $ return ":set -XRequiredTypeArguments"
:def +readp const $ return ":m +Text.ParserCombinators.ReadP"
:def -readp const $ return ":m -Text.ParserCombinators.ReadP"
